<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[开篇]]></title>
    <url>%2F2018%2F10%2F24%2F%E5%BC%80%E7%AF%87%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[UML的Ascii艺术]]></title>
    <url>%2F2018%2F10%2F21%2FUML%E7%9A%84Ascii%E8%89%BA%E6%9C%AF%2F</url>
    <content type="text"><![CDATA[工具介绍 程序员的专属乐趣 Graph Easy PlantUml Graph Easy安装12sudo install graphvizsudo cpan graph-easy 使用12[ A ] -&gt; [ C ] -&gt; [ D ][ C ] -&gt; [ E ] 表示两个Node之间的基本关系，以下是测试结果： 1234567891011~$ graph-easy &lt;&lt;&lt;'[ A ] -&gt; [ C ] -&gt; [ D ] [ C ] -&gt; [ E ]'+---+ +---+ +---+| A | --&gt; | C | --&gt; | D |+---+ +---+ +---+ | | v +---+ | E | +---+ 特性Unicode1[ العربية ] -- link --&gt; [ 日本語 ] --&gt; [ 中文 ] -- كوردي --&gt; [ English ] 号称全量支持Unicode,以下为测试结果： 12345~$ graph-easy &lt;&lt;&lt;'[ العربية ] -- link --&gt; [ 日本語 ] --&gt; [ 中文 ] -- كوردي --&gt; [ English ]'+---------+ link +-----+ +----+ كوردي +---------+| العربية | ------&gt; | 日本語 | --&gt; | 中文 | -------&gt; | English |+---------+ +-----+ +----+ +---------+ 各种语言混合输出效果需要手动修改。 同名Node每一个Node都是不重名的，但有些时候需要在布局上显示同样的名字，可以给Node加上一个lablel。1[ Bonn ] &#123; label: Berlin; &#125; -&gt; [ Berlin ] 测试结果：12345~$ graph-easy &lt;&lt;&lt;'[ Bonn ] &#123; label: Berlin; &#125; -&gt; [ Berlin ]'+--------+ +--------+| Berlin | --&gt; | Berlin |+--------+ +--------+ 匿名和隐藏Node给Node添加 invisible属性或者直接声明为匿名Node1234567[ ] &#123; title: Anonymous Node; &#125; -&gt; [ $sys$Node ] &#123; shape: invisible; title: You don't see me! &#125; -&gt; [ Buna ] -&gt; [ Borna ] &#123; shape: point; point-style: invisible; &#125; -&gt; [ Bremen ] -&gt; &#123; style: invisible; &#125; [ Bonn ] -&gt; [ $sys$Node ] 测试结果：12345 +------------------------------------------+ v | +------+ +--------+ +------+--&gt; --&gt; | Buna | --&gt; --&gt; | Bremen | | Bonn | +------+ +--------+ +------+ edge命名12345[ car ] &#123; shape: edge; &#125;[ Bonn ] -- train --&gt; [ Berlin ] -- [ car ] --&gt; [ Ulm ][ rented ] --&gt; [ car ] 测试结果： 123456789+------+ train +--------+ car +-----+| Bonn | -------&gt; | Berlin | -----------------&gt; | Ulm |+------+ +--------+ +-----+ ^ | | +--------+ | rented | +--------+ 其他关系1234567891011121314151617[ A ] -- triangle --&gt; [ B ] -- box --&gt; &#123; arrowshape: box; &#125; [ C ] -- inv --&gt; &#123; arrowshape: inv; &#125; [ D ] -- diamond --&gt; &#123; arrowshape: diamond; &#125; [ E ] -- dot --&gt; &#123; arrowshape: dot; &#125; [ F ] -- line --&gt; &#123; arrowshape: line; &#125; [ G ] -- plus --&gt; &#123; arrowshape: cross; &#125; [ H ] -- x --&gt; &#123; arrowshape: x; &#125; [ I ][ a ] -- triangle --&gt; &#123; arrowstyle: filled; &#125; [ b ] -- box --&gt; &#123; arrowshape: box; arrowstyle: filled; &#125; [ c ] -- inv --&gt; &#123; arrowshape: inv; arrowstyle: filled; &#125; [ d ] -- diamond --&gt; &#123; arrowshape: diamond; arrowstyle: filled; &#125; [ e ] -- dot --&gt; &#123; arrowshape: dot; arrowstyle: filled; &#125; [ f ] -- line --&gt; &#123; arrowshape: line; arrowstyle: filled; &#125; [ g ] -- plus --&gt; &#123; arrowshape: cross; arrowstyle: filled; &#125; [ h ] -- x --&gt; &#123; arrowshape: x; arrowstyle: filled; &#125; [ i ] 测试结果：123456+---+ triangle +---+ box +---+ inv +---+ diamond +---+ dot +---+ line +---+ plus +---+ x +---+| A | ----------&gt; | B | -----] | C | -----&lt; | D | ---------&gt; | E | -----) | F | ------| | G | ------+ | H | ---x | I |+---+ +---+ +---+ +---+ +---+ +---+ +---+ +---+ +---++---+ triangle +---+ box +---+ inv +---+ diamond +---+ dot +---+ line +---+ plus +---+ x +---+| a | ----------&gt; | b | -----# | c | -----&lt; | d | ---------&gt; | e | -----* | f | ------| | g | ------+ | h | ---x | i |+---+ +---+ +---+ +---+ +---+ +---+ +---+ +---+ +---+ 可以看到在命令行下（ubuntu）测试结果有些关系没有正确的表示出来。 分组 (Clusters or Subgraphs)1( Capitals: [ Bonn ], [ Berlin ] ) 用()将不同的Subgraph包含起来测试结果：1234567891011+ - - - - - - +' Capitals: '' '' +---------+ '' | Berlin | '' +---------+ '' +---------+ '' | Bonn | '' +---------+ '' '+ - - - - - - + 连接1234[ Potsdam ], [ Mannheim ] --&gt; &#123; end: back,0; &#125;[ Weimar ] --&gt; &#123; start: front,0; &#125; [ Finsterwalde ], [ Aachen ] 123456789+----------+ +--------+ +--------------+| Mannheim | ------+-&gt; | Weimar | -+-----&gt; | Aachen |+----------+ | +--------+ | +--------------+ | | | | | |+----------+ | | +--------------+| Potsdam | ------+ +-----&gt; | Finsterwalde |+----------+ +--------------+ 布局graph的west/south属性可以决定整个图的布局是自上而下的还是从左到右的， 12345graph &#123; flow: west; &#125;[ Duisburg ] -&gt; [ Siegen ] &#123; flow: front; &#125; -&gt; [ Adenau ][ Siegen ] -&gt; &#123; flow: up; &#125; [ Monschau ] 测试结果： 123456789101112131415+----------+| Monschau |+----------+ ^ | |+----------+ +----------+| Siegen | &lt;-- | Duisburg |+----------+ +----------+ | | v+----------+| Adenau |+----------+ 综述用来写注释或者表达隐藏细节的架构是一个不错的选择，便捷容易上手，但是表示复杂关系有些困难，尤其类或对象的属性难以描述，如下所示。 PlantUmlPlantUML是一个允许快速编写以下图类的组件： 序列图(Sequence diagram) 用例图(Usecase diagram) 类图(Class diagram) 活动图（Activity diagram） 组件图(Component diagram) 状态图(State diagram) 对象图(Object diagram) 部署图(Deployment diagram) 时序图(Timing diagram) 也支持以下非UML图： 线框图形界面(Wireframe graphical interface) Archimate图(Archimate diagram) 规范和描述语言（Specification and Description Language,SDL） 黛塔图(Ditaa diagram) 甘特图(Gantt diagram) 数学与AsciiMath或JLaTeXMath符号(Mathematic with AsciiMath or JLaTeXMath notation) PlantUML可以在许多其他工具中使用并生成PNG，SVG或LaTeX格式的图像，也可以生成ASCII艺术图，极大地提高设计和开发效率。 目前PlantUML对Ascii艺术在时序图上特别理想，其他类型的UML图要么输出格式难看，信息缺损，要么不支持。 12345678┌─┐ ┌─┐│A│ │B│└┬┘ └┬┘ │ Hello │ │───────────&gt;│┌┴┐ ┌┴┐│A│ │B│└─┘ └─┘ 123456789101112131415161718192021222324252627282930313233343536373839404142 ┌─────┐ ┌───┐ ┌───┐ │Alice│ │Bob│ │Log│ └──┬──┘ └─┬─┘ └─┬─┘ │Authentication Request │ │ │───────────────────────&gt;│ │ │ │ │ │ │ │ ╔══════╤═════════════════════════╪════════════════════════╪══════════════╪═════════════════════╗║ ALT │ successful case │ │ │ ║╟──────┘ │ │ │ ║║ │Authentication Accepted │ │ ║║ │&lt;───────────────────────│ │ ║╠════════════════════════════════╪════════════════════════╪══════════════╪═════════════════════╣║ [some kind of failure] │ │ │ ║║ │Authentication Failure │ │ ║║ │&lt;───────────────────────│ │ ║║ │ │ │ ║║ │ │ │ ║║ ╔═══════════════╤══════╪════════════════════════╪══════════════╪═══════════╗ ║║ ║ MY OWN LABEL │ │ │ │ ║ ║║ ╟───────────────┘ │ Log attack start │ ║ ║║ ║ │──────────────────────────────────────&gt;│ ║ ║║ ║ │ │ │ ║ ║║ ║ │ │ │ ║ ║║ ║ ╔═══════╤════╪════════════════════════╪═══════════╗ │ ║ ║║ ║ ║ LOOP │ 1000 times │ ║ │ ║ ║║ ║ ╟───────┘ │ │ ║ │ ║ ║║ ║ ║ │ DNS Attack │ ║ │ ║ ║║ ║ ║ │───────────────────────&gt;│ ║ │ ║ ║║ ║ ╚════════════╪════════════════════════╪═══════════╝ │ ║ ║║ ║ │ │ │ ║ ║║ ║ │ Log attack end │ ║ ║║ ║ │──────────────────────────────────────&gt;│ ║ ║║ ╚══════════════════════╪════════════════════════╪══════════════╪═══════════╝ ║╠════════════════════════════════╪════════════════════════╪══════════════╪═════════════════════╣║ [Another type of failure] │ │ │ ║║ │ Please repeat │ │ ║║ │&lt;───────────────────────│ │ ║╚════════════════════════════════╪════════════════════════╪══════════════╪═════════════════════╝ ┌──┴──┐ ┌─┴─┐ ┌─┴─┐ │Alice│ │Bob│ │Log│ └─────┘ └───┘ └───┘ 12345678910111213141516171819202122┌─┐ ║"│ └┬┘ ┌┼┐ ┌───────────────┐ │ ┌─────┐ │I have a really│┌┴┐ │Alice│ │long name │Bob └──┬──┘ └───────┬───────┘ │Authentication Request │ │ │&lt;───────────────────────│ │ │ │ │ │Authentication Response │ │ │───────────────────────&gt;│ │ │ │ │ │ Log transaction │ │─────────────────────────────────────────────&gt;│ Bob ┌──┴──┐ ┌───────┴───────┐┌─┐ │Alice│ │I have a really│║"│ └─────┘ │long name │└┬┘ └───────────────┘┌┼┐ │ ┌┴┐ 其他Ascii Arts 效果图的使用场景有限，可以利用ditaa渲染成图片 下面推荐几个在线生成Ascii Arts工具：https://www.planttext.com/https://art.io/sequence#]]></content>
      <tags>
        <tag>UML</tag>
      </tags>
  </entry>
</search>
